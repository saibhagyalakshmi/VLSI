module ALU32_tb;
    reg [31:0] A;
    reg [31:0] B;
    reg [2:0] ALUOp;
    wire [31:0] Result;
    wire Zero;

    ALU32 uut (
        .A(A),
        .B(B),
        .ALUOp(ALUOp),
        .Result(Result),
        .Zero(Zero)
    );

    initial begin
        $dumpfile("ALU32_tb.vcd");
        $dumpvars(0, ALU32_tb);

        // Test case inputs and expected behavior
        // Test case 1: Addition
        
        A = 32'd10; B = 32'd15; ALUOp = 3'b000;
        #10;

        // Test case 2: Subtraction
        
        A = 32'd20; B = 32'd5; ALUOp = 3'b001;
        #10;

        // Test case 3: AND

        A = 32'hA5A5A5A5; B = 32'h5A5A5A5A; ALUOp = 3'b010;
        #10;

        // Test case 4: OR
    
        A = 32'hFF00FF00; B = 32'h00FF00FF; ALUOp = 3'b011;
        #10;

        // Test case 5: XOR
    
        A = 32'h12345678; B = 32'h87654321; ALUOp = 3'b100;
        #10;

        // Test case 6: NOT

        A = 32'hFFFFFFFF; B = 32'b0; ALUOp = 3'b101;
        #10;

        // Test case 7: Logical left shift

        A = 32'd8; B = 32'b0; ALUOp = 3'b110;
        #10;

        // Test case 8: Logical right shift
        
        A = 32'd16; B = 32'b0; ALUOp = 3'b111;
        #10;
        $finish;
    end

endmodule
