module alu (
    input [31:0] a,         // Input operand A
    input [31:0] b,         // Input operand B
    input [3:0] alu_ctrl,   // ALU control signal
    output reg [31:0] result, // ALU result
    output reg zero         // Zero flag
);

    always @(*) begin
        case (alu_ctrl)
            4'b0000: result = a + b;            // ADD
            4'b0001: result = a - b;            // SUB
            4'b0010: result = a & b;            // AND
            4'b0011: result = a | b;            // OR
            4'b0100: result = ~a;               // NOT
            4'b0101: result = a ^ b;            // XOR
            4'b0110: result = a << b[4:0];      // Logical shift left
            4'b0111: result = a >> b[4:0];      // Logical shift right
            4'b1000: result = $signed(a) >>> b[4:0]; // Arithmetic shift right
            4'b1001: result = (a < b) ? 1 : 0;  // Less than comparison
            default: result = 0;                // Default
        endcase

        // Zero flag
        zero = (result == 0);
    end
endmodule
